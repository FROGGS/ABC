use v6;
use ABC::Header;
use ABC::Tune;
use ABC::Grammar;
use ABC::Actions;
use ABC::Duration; #OK
use ABC::Note;
use ABC::LongRest;
use ABC::Utils;

sub print-header($out, $header) {
    for $header.lines -> $header-line {
        say $header-line.key ~ ":" ~ $header-line.value;
    }
}

sub print-music($out, @music, &shifter) {
    for @music -> $element {
        if $element.key eq 'endline' {
            say "";
            next;
        }
        print $element.value ~~ ABC::Pitched ?? ~$element.value.transpose(&shifter) !! $element.value;
    }
}

sub Transpose($in, $out, %old-key, %new-key, %shift, $shift) {
    sub transpose($accidental, $basenote, $octave) {
        my $ordinal = pitch-to-ordinal(%old-key, $accidental, $basenote, $octave);
        ordinal-to-pitch(%new-key, %shift{$basenote}, $ordinal + shift);
    }

    my $actions = ABC::Actions.new;
    my $match = ABC::Grammar.parse($in.slurp, :rule<tune_file>, :$actions);
    die "Did not match ABC grammar: last tune understood:\n { $actions.current-tune }" unless $match;

    for @( $match.ast ) -> $tune {
        $*ERR.say: "Working on { $tune.header.get-first-value("T") // $tune.header.get-first-value("X") }";
        print-header($out, $tune.header);
        print-music($out, $tune.music, &shift-octave);
    }
}

multi sub MAIN() {
    Transpose($*IN, $*OUT, {}, {"F" => "^", "C" => "^"}, +2);
}

multi sub MAIN("down") {
    Transpose($*IN, $*OUT, - 1);
}

multi sub MAIN(Int $shift) {
    Transpose($*IN, $*OUT, $shift);
}
